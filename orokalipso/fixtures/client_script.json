[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Analizar Puro",
  "enabled": 1,
  "modified": "2024-11-14 08:11:43.921782",
  "module": "OroKalipso",
  "name": "Analizar Puro",
  "script": "function redondeo2(num, decimalPlaces = 2) //funcion de apoyo para optimizar los calculos\r\n{\r\n    var p = Math.pow(10, decimalPlaces);\r\n    var n = (num * p) * (1 + Number.EPSILON);\r\n    return Math.round(n) / p;\r\n}\r\n// termino de la funcion.\r\n\r\n// Función para calcular importe y actualizar el total neto\r\nfunction calcularImporteYActualizarTotalNeto(frm, row) {\r\n    let cantidad = row.importe_pagado;\r\n    let tasa = row.tasa_de_pago;\r\n    let pendiente = frm.doc.divisas_predeterminado;\r\n\r\n    if (tasa !== 0) {\r\n        let importe = redondeo2(cantidad / tasa);\r\n        row.importe_pago = importe;\r\n        refresh_field(row);\r\n        \r\n        // Actualizar total neto\r\n        let pagos = frm.doc.analizar_puro_pagos;\r\n        let total = pagos.reduce((acc, item) => acc + item.importe_pago, 0);\r\n        frm.set_value(\"monto_cobrado\", total);\r\n        pendiente = pendiente - total;\r\n        frm.set_value(\"pendiente\", pendiente);\r\n        \r\n    }\r\n}\r\n// FIN Función para calcular importe y actualizar el total neto\r\n\r\n//Funcion actualizar el pediente si se borra una fila\r\nfunction actualizarImporteYPendiente(frm) {\r\n    let pendiente = frm.doc.divisas_predeterminado;\r\n\r\n    // Actualizar total neto\r\n    let pagos = frm.doc.analizar_puro_pagos;\r\n    let total = pagos.reduce((acc, item) => acc + item.importe_pago, 0);\r\n    frm.set_value(\"monto_cobrado\", total);\r\n    pendiente = pendiente - total;\r\n    frm.set_value(\"pendiente\", pendiente);\r\n        \r\n}\r\n//FIN funcion actualizar el pediente si se borra una fila\r\n\r\n//validacion antes de guardar\r\nfrappe.ui.form.on('Analizar Puro', {                                 //validacion antes de guardar\r\n\tbefore_save: function(frm)\r\n\t{\r\n\t    //validacion de datos y calculos\r\n\t    let peso0 = redondeo2(frm.doc.peso_sin_fundir);             //se toma el peso sin fundir\r\n        let en_oficina = frm.doc.en_oficina;\r\n        if(en_oficina == 0)\r\n        {\r\n            \r\n            frm.set_value(\"peso_fundido\", peso0);                   //se toma el peso del campo peso sin fundir si no se realizo la fundicion en la oficina\r\n\r\n        }\r\n\t    \r\n\t    let peso1 = redondeo2(frm.doc.peso_fundido);                    //se toma el peso fundido\r\n\t    let merma = redondeo2(frm.doc.porc_merma);                      //se toma la merma\r\n\t    let ley0 = redondeo2(frm.doc.ley_analitica);                    //se toma la ley analitica\r\n\t    let ley1 = redondeo2(frm.doc.ley_recuperable);                  //se toma la ley recuperable\r\n\t    let puras = redondeo2(frm.doc.puras_en_gr);                     //se toma el valor de las puras\r\n\t    let merma_validada = redondeo2((((peso1-peso0)/peso0)*100));    //se calcula la merma para una posterior validacion\r\n\t    let ley1_validada = redondeo2(ley0 -5);                         //se calcula la nueva ley recuperable para una posterior validacion\r\n\t    let puras_validada = redondeo2((peso1*ley1)/1000);              //se calcula el valor de las puras para una posterior validacion\r\n\t    let nro_calculos = frm.doc.nro_de_calculos;                     //se verifica el nro de calculos realizados\r\n            \r\n\t    if(ley1_validada != ley1 || puras_validada != puras || merma != merma_validada || nro_calculos == 0 || ley1_validada < 100) //se validan los datos calculados que toman en cuenta todos los campos a guardar\r\n\t    {\r\n\t        frappe.throw(                                       //se causa un error en el sismeta y se muestra un mensaje en pantalla.\r\n                'Valide los datos introducidos y presione el Boton \"Calcular\" si esta satisfecho entonces guarde el documento'\r\n                );    \r\n\t    }\r\n\t    \r\n\t     //caso principal Analisis Costo cero en cero\r\n        if (frm.doc.costo_cero == 0){\r\n            //Caso en que no seleccionen ningun tipo de cobro\r\n            if(frm.doc.cobro_en_divisas ==0 && frm.doc.cobro_en_virutas == 0){\r\n                frappe.throw(\r\n                    'Seleccione algun metodo de cobro .<br>' +\r\n                    'Verifique el tipo de cobro a implementar.'\r\n                );\r\n            }\r\n\r\n            //entoncs evaluo los montos\r\n            //Caso Cobro virutas y virutas cobradas 0\r\n            if (frm.doc.cobro_en_virutas == 1 && frm.doc.virutas_cobradas == 0) {\r\n                frappe.throw(\r\n                    '-Se intenta guardar un análisis sin cobro alguno.<br>' +\r\n                    '*-Si es Crédito, seleccione cobro en Divisas y marque crédito.<br>' +\r\n                    '*-En caso de Análisis de costo cero marque la casilla correspondiente.<br>' + \r\n                    '*****Porfavor asegúrese de revisar los cobros...******'\r\n                );\r\n            }\r\n            \r\n            //Caso  Cobro en Divisas Monto Cobrado 0\r\n            if (frm.doc.cobro_en_divisas == 1 && frm.doc.monto_cobrado == 0) {\r\n                if (frm.doc.credito == 1){\r\n                    //En caso de Ser credito verificacion del monto acreditado\r\n                    if(frm.doc.divisas_predeterminado <= frm.doc.divisas_minimo){\r\n                        frappe.throw(\r\n                            'Se encontro un error en el cobro.<br>'+\r\n                            'Asegurese de revisar los cobros...<br>' + 'Monto minimo  : ' + frm.doc.divisas_minimo\r\n                        );\r\n                    }\r\n                    return;\r\n                }\r\n                // en Caso de no ser Credito debe ingresar un monto\r\n                frappe.throw(\r\n                    '-Se intenta guardar un análisis sin cobro alguno.<br>' +\r\n                    '*-Si es Crédito, seleccione cobro en Divisas y marque crédito.<br>' +\r\n                    '*-En caso de Análisis de costo cero marque la casilla correspondiente.<br>' + \r\n                    '*****Porfavor asegúrese de revisar los cobros...******'\r\n                );\r\n            }\r\n\r\n        }\r\n\t}\r\n\t\r\n});\r\n// FIN Validacion de datos\r\n\r\n//Funcionamiento del documento\r\nfrappe.ui.form.on('Analizar Puro', {\r\n\t\r\n    onload: function(frm) {\r\n        //funcion de aplicacion de filtros\r\n        const applyFilter = (field, fieldname, queryFunc) => {\r\n        frm.set_query(field, fieldname, queryFunc);  // Aquí pasamos los tres argumentos correctos para resolver el contacto del supplier\r\n        };\r\n                                                //Aplicaciones de filtros\r\n        //filtro para contacto relacionado con supplier\r\n        applyFilter('contacto', (doc) => {\r\n            let filtro = doc.supplier || 'Seleccione Cliente';\r\n            return {\r\n            'filters': [['Dynamic Link', 'link_name', 'like', filtro]],\r\n            };\r\n        });\r\n        \r\n        //filtro para almacen de virutas\r\n        applyFilter('almacen_predeterminado', (doc) => {\r\n            let filtro = \"viruta\" || 'Seleccione Almacen';\r\n            return {\r\n            'filters': [[\"Warehouse\",\"name\",\"like\",\"%\" + filtro + \"%\"]],\r\n            };\r\n        });\r\n        \r\n        //filtro para que muestre solo los metodos de pago de la divisa seleccionada\r\n        applyFilter('modo_de_pago', 'analizar_puro_pagos', function(doc, cdt, cdn) {\r\n            let d = locals[cdt][cdn];\r\n            let divisa = d.divisa_de_pago;\r\n        \r\n            // Si 'divisa' es null o undefined, usa '%'\r\n            if (!divisa) {\r\n                divisa = '%';\r\n            }\r\n        \r\n            return {\r\n                'filters': [\r\n                    ['Mode of Payment', 'mode_of_payment', 'like', '%(' + divisa + ')%'],\r\n                ],\r\n            };\r\n        });\r\n    },\r\n    \r\n    // Mostrar el saldo del cliente Seleccionado\r\n    supplier: function(frm) {\r\n        let supplier = frm.doc.supplier;\r\n        if (frm.doc.posting_date) {\r\n            frappe.call({\r\n                method: \"erpnext.accounts.doctype.payment_entry.payment_entry.get_party_and_account_balance\",\r\n                args: {\r\n                    company: frm.doc.company,\r\n                    date: frm.doc.posting_date,\r\n                    ptype: 'supplier',\r\n                    pty: frm.doc.supplier,\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        frappe.run_serially([\r\n                            () => frm.set_value(\"saldo_cliente\", r.message.party_balance),\r\n                        ]);\r\n                    }\r\n                },\r\n            });\r\n        }\r\n        \r\n        // Codigo para Mostrar el apodo del cliente\r\n        frappe.call({\r\n            method: \"frappe.client.get_value\",\r\n            args: {\r\n                doctype: \"Supplier\",\r\n                filters: {\r\n                    name: supplier\r\n                },\r\n                fieldname: ['supplier_details']\r\n            },\r\n            callback: function(r) {\r\n                if (r.message.supplier_details) {\r\n                    frappe.run_serially([\r\n                        () => frm.set_value(\"apodo\", r.message.supplier_details),\r\n                    ]);\r\n                }else {frm.set_value(\"apodo\", supplier)}\r\n            },\r\n        });\r\n    },\r\n    \r\n    //Seleccion de Oficina\r\n    oficina: function(frm){\r\n        let oficina = frm.doc.oficina;\r\n        frappe.call({\r\n            method: \"frappe.client.get_value\",\r\n            args: {\r\n                doctype: \"Ofinicinas configuraciones\",\r\n                filters: {\r\n                    name: oficina\r\n                },\r\n                fieldname: ['costo_en_viruta_estandar',\r\n                            'costo_en_viruta_minimo',\r\n                            'item_analisis',\r\n                            'almacen_predeterminado_analisis',\r\n                            'cuenta_amortizacion',\r\n                            'divisas_estandar',\r\n                            'divisas_minimo',\r\n                            'item_servicio_analisis',\r\n                            'centro_costos_analisis',\r\n                            'precio_viruta'\r\n                            ]\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    frappe.run_serially([\r\n                        () => frm.set_value(\"viruta_predeterminado\", r.message.costo_en_viruta_estandar),\r\n                        () => frm.set_value(\"viruta_minimo\", r.message.costo_en_viruta_minimo),\r\n                        () => frm.set_value(\"item_predeterminado\", r.message.item_analisis),\r\n                        () => frm.set_value(\"almacen_predeterminado\", r.message.almacen_predeterminado_analisis),\r\n                        () => frm.set_value(\"cuenta_de_amortizacion\", r.message.cuenta_amortizacion),\r\n                        () => frm.set_value(\"divisas_predeterminado\", r.message.divisas_estandar),\r\n                        () => frm.set_value(\"divisas_minimo\", r.message.divisas_minimo),\r\n                        () => frm.set_value(\"item_servicio\", r.message.item_servicio_analisis),\r\n                        () => frm.set_value(\"centro_costos\", r.message.centro_costos_analisis),\r\n                        () => frm.set_value(\"precio_viruta\", r.message.precio_viruta)\r\n                    ]);\r\n                }else {frappe.throw('Error De Configuracion');}\r\n            },\r\n        });\r\n        \r\n    },\r\n    \r\n    //Calculos del Analisis\r\n    calcular: function(frm){                                                          \r\n        let peso0 = redondeo2(frm.doc.peso_sin_fundir);         //se toma el peso del campo peso sin fundir\r\n        let en_oficina = frm.doc.en_oficina;                    //se toma el marcador de si la fundicion se realizo en oficina\r\n        if(en_oficina == 0)\r\n            {\r\n                \r\n            frm.doc.peso_fundido = peso0;                                       //se toma el peso del campo peso sin fundir si no se realizo la fundicion en la oficina\r\n            refresh_field('peso_fundido');                                      //se actualiza el campo peso fundido.\r\n                \r\n            }\r\n        let peso1 =  redondeo2(frm.doc.peso_fundido);                           //se toma el peso del campo peso fundido\r\n        let merma = 0;                                                          //se establece una variable para el calculo de merma y se asigna cero.\r\n        merma = redondeo2((((peso1-peso0)/peso0)*100));                         //se calcula y se redondea la merma a dos decimales\r\n        if(isNaN(merma) || merma == undefined || merma == null || merma > 0)    //se verifica que el valor de merma sea correcto.\r\n            {\r\n                \r\n            frappe.throw(                                   //se causa un error en el sismeta y se muestra un mensaje en pantalla.\r\n                \"Verifique los datos, la merma es: \"+merma+\" no es un valor correcto\"\r\n                );    \r\n                    \r\n            }\r\n        frm.doc.porc_merma = merma;                         //se establece el valor calculado de merma en el campo merma\r\n        refresh_field('porc_merma');                        //se actualiza el campo merma para ser visible en pantalla.\r\n        let ley0 = frm.doc.ley_analitica;\r\n        if(ley0 > 999.99 || ley0 < 0 || ley0 < 100)         //condicion para evitar que se coloque un valor de ley incorrecto.\r\n            {\r\n\r\n            frm.doc.ley_analitica = 0;                      //reestrablecer valor de la ley\r\n            refresh_field('ley_analitica');                 //refrescar campo de ley analitica \r\n            frm.doc.ley_recuperable = 0;                    //reestablecer ley recuperable\r\n            refresh_field('ley_recuperable');               //refrescar campo de ley recuperable\r\n            frappe.throw(\r\n                'verifique el valor correspondiente la ley no puede ser '+ley0+' la ley debe ser \\\r\n                un valor positivo, comprendido entre 100 y 999,99');\r\n                \r\n            }\r\n        let ley1 = redondeo2(ley0 -5);                              //se calcula la ley recuperable restando 5 puntos \r\n        frm.doc.ley_recuperable = ley1;                             //se establece el valor de la ley recuperable en el campo correspondiente\r\n\t    refresh_field('ley_recuperable');                           //se actualiza el campo de ley recuperable para que sea visible.\r\n\t    let puras = redondeo2(peso1*ley1/1000);                     //se calcula la variable puras utilizando la ley recuperable.\r\n        frm.doc.puras_en_gr = puras;                                //se establece el valor calculado para las puras en gramos en el campo correspondiente\r\n        refresh_field('puras_en_gr');                               //se actualiza el campo puras para que sea visible.\r\n        frm.doc.nro_de_calculos = frm.doc.nro_de_calculos + 1;      //se aumenta el contador de calculos realizados en la pagina solo es un control\r\n        refresh_field('nro_de_calculos');                           //se actualiza el campo de calculos realizados para ser visible en pantalla\r\n\r\n\t},\r\n\t\r\n\t//Obtencion del nro de Tlf si lo tiene el contacto asignado\r\n    contacto: function(frm){\r\n    let contacto = frm.doc.contacto;                        //Contacto relacionado con el supplier\r\n    frappe.call(\r\n        {                                                   //llamada al metodo de servidor para obtener datos de contacto\r\n            method:\"frappe.client.get_value\",\r\n            args: {\r\n                doctype:\"Contact\",                          //documento de tipo Item\r\n                    filters: {                                  //argumento para filtrado\r\n                        name : contacto                  //filtrado por item code igua a \"Viruta\"\r\n                    },\r\n                fieldname : ['mobile_no']                     //obtencion de unidad de medida predeterminada uom\r\n            }, \r\n            callback: function(r) {                         //funcion callback\r\n               console.log(r);\r\n               frm.set_value(\"nro_movil\", r.message.mobile_no);        //Colocar el Nro de Tlf en el campo\r\n\r\n            }\r\n\t   });\r\n    },\r\n    \r\n    cobro_en_divisas: function(frm){\r\n        let divisas_predeterminado = frm.doc.divisas_predeterminado;\r\n        if(frm.doc.analizar_puro_pagos.length == 0)                         //agregar primera fila de cobro de no haber ninguna fila\r\n        {    \r\n            let new_row = frm.add_child(\"analizar_puro_pagos\");\r\n            new_row.fecha_pago = frm.doc.posting_date;\r\n            refresh_field(\"analizar_puro_pagos\");\r\n            \r\n        }\r\n        frm.set_value(\"pendiente\", divisas_predeterminado);\r\n        if(frm.doc.cobro_en_divisas == 0)\r\n        {\r\n            frm.set_value(\"pendiente\", 0);\r\n        }\r\n      \r\n    },\r\n    \r\n    cobro_en_virutas: function(frm){\r\n        frm.set_value(\"pendiente\", 0);                                      // Establecer Pendiente en Divisas a 0 porque se cobrara en virutas\r\n        let virutas_predeterminado = frm.doc.viruta_predeterminado;\r\n        let item_predeterminado = frm.doc.item_predeterminado;\r\n        let almacen_predeterminado = frm.doc.almacen_predeterminado;\r\n        let precio_viruta = frm.doc.precio_viruta;\r\n        if(frm.doc.items.length == 0)                                       //agregar primera fila de cobro de no haber ninguna fila\r\n        {    \r\n            frappe.call(\r\n            {                                                   //llamada al metodo de servidor para obtener datos del producto \"Viruta\"\r\n                method:\"frappe.client.get_value\",\r\n                args: {\r\n                    doctype:\"Item\",                             //documento de tipo Item\r\n                    filters: {                                  //argumento para filtrado\r\n                        item_code:item_predeterminado           //filtrado por item code igua a \"Viruta\"\r\n                    },\r\n                    fieldname:[\r\n                                'stock_uom'\r\n                                ]                               //obtencion de unidad de medida predeterminada uom\r\n                }, \r\n                callback: function(r) {                         //funcion callback\r\n                    let pago_viruta = frm.add_child(\"items\");                       //nueva fila\r\n                    pago_viruta.item_code = item_predeterminado;                    //Seleccion del item predeterminado\r\n                    pago_viruta.item_name = item_predeterminado;\r\n                    pago_viruta.stock_qty = virutas_predeterminado;\r\n                    pago_viruta.qty = virutas_predeterminado;\r\n                    pago_viruta.uom = r.message.stock_uom;                          //unidad de medida del articulo\r\n                    pago_viruta.allow_zero_valuation_rate= 0;                       //permitir tasa de valoracion cero\r\n                    pago_viruta.rate = precio_viruta;                           \r\n                    pago_viruta.base_price_list_rate = precio_viruta;           \r\n                    pago_viruta.base_rate = precio_viruta;\r\n                    pago_viruta.warehouse = almacen_predeterminado;                     //asignacion de almacen para el producto\r\n                    pago_viruta.amount = redondeo2(pago_viruta.qty*pago_viruta.rate);   //Asignacion del valor total amount\r\n                    refresh_field(\"items\");                                             //Actualizar tabla secundaria.\r\n                    frm.set_value(\"virutas_cobradas\", virutas_predeterminado);          //Actualizar el monto de virutas cobradas\r\n                }\r\n    \t   });\r\n        }else\r\n        {\r\n            frm.doc.items =[];                                                          //Se vacia la tabla de virutas\r\n            frm.set_value(\"virutas_cobradas\", 0);\r\n            \r\n        }\r\n    },\r\n    \r\n    //en caso de asignar credito se lle asignara el monto al cliente como pendiente\r\n    credito: function(frm){\r\n        let credito = frm.doc.credito;\r\n        let pendiente = frm.doc.divisas_predeterminado;\r\n        if(credito == 1){\r\n            frm.doc.analizar_puro_pagos =[];\r\n            frm.set_value(\"monto_cobrado\", 0);\r\n            frm.set_value(\"pendiente\", pendiente);\r\n            \r\n        }else{\r\n            let new_row = frm.add_child(\"analizar_puro_pagos\");\r\n            new_row.fecha_pago = frm.doc.posting_date;\r\n            refresh_field(\"analizar_puro_pagos\");   \r\n        }\r\n    },\r\n    \r\n    // en caso de costo cero verificado no habra Factura de compra asociada.\r\n    costo_cero: function(frm) {\r\n        // Si la bandera está activada, ignorar la función para evitar el ciclo\r\n        if (frm.is_costo_cero_checked) {\r\n            frm.is_costo_cero_checked = false;\r\n            return;\r\n        }\r\n\r\n        if (frm.doc.costo_cero) {\r\n            // Desmarcar la casilla y activar la bandera\r\n            frm.is_costo_cero_checked = true;\r\n            frm.set_value('costo_cero', 0);\r\n\r\n            // Usar frappe.prompt para solicitar la contraseña\r\n            frappe.prompt(\r\n                [\r\n                    {\r\n                        fieldname: 'password',\r\n                        fieldtype: 'Password',\r\n                        label: 'Contraseña',\r\n                        reqd: 1\r\n                    }\r\n                ],\r\n                function(values) {\r\n                    // Llama al servidor para verificar la contraseña\r\n                    frappe.call({\r\n                        method: \"frappe.client.get_value\",\r\n                        args: {\r\n                            doctype: \"User\",\r\n                            filters: {\r\n                                name: frappe.session.user\r\n                            },\r\n                            fieldname: ['interest']\r\n                        },\r\n                        callback: function(r) {\r\n                            if (r.message && r.message.interest && r.message.interest.includes(values.password)) {\r\n                                // Si la contraseña es correcta, marcar la casilla sin reactivar la función\r\n                                frappe.show_alert({message: __('Contraseña verificada'), indicator: 'green'});\r\n                                frm.is_costo_cero_checked = true;\r\n                                frm.set_value('costo_cero', 1); // Marca la casilla después de verificar\r\n                                frm.set_value('cobro_en_virutas', 0);\r\n                                frm.set_value('cobro_en_divisas', 0);\r\n                            } else {\r\n                                // Si la contraseña no es correcta, dejar la casilla desmarcada\r\n                                frappe.show_alert({message: __('Contraseña incorrecta. La casilla permanecerá desmarcada.'), indicator: 'red'});\r\n                                frm.set_value('costo_cero', 0); // Asegura que la casilla esté desmarcada\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n                __('Verificación de contraseña'),\r\n                __('Confirmar')\r\n            );\r\n        }\r\n    }\r\n    \r\n});\r\n\r\n//Funcion antigua de crear factura del analisis\r\nfrappe.ui.form.on('Analizar Puro', { //script llamada a la api para crear factura de compra\r\n    on_submit: function(frm) {\r\n\r\n                    frappe.call({\r\n                    method:'factura_analisis',\r\n                    args:{\r\n                \r\n                        //doctype_from:frm.doc.doctype,\r\n                        name:frm.doc.name\r\n                        \r\n                    },\r\n                    callback:function(r)\r\n                    {\r\n                        //console.log(r);  \r\n\r\n                    }\r\n\t     });\r\n\t   \r\n\t    }\r\n\t    \r\n});\r\n\r\n//Tabla hija de Pagos en divisas\r\nfrappe.ui.form.on('Analizar puro pagos', {\r\n    divisa_de_pago(frm, cdt , cdn){\r\n        let row = locals[cdt][cdn];\r\n        let day = row.fecha_pago;\r\n\r\n        frappe.call({\r\n            method: \"erpnext.setup.utils.get_exchange_rate\",\r\n            args: {\r\n                from_currency: 'USD',\r\n                to_currency: row.divisa_de_pago,\r\n                transaction_date: day,\r\n            },\r\n            callback: (r) => {\r\n                let tasa_de_pago = redondeo2(r.message, 9);\r\n                row.tasa_de_pago = tasa_de_pago;\r\n                refresh_field(row);\r\n            },\r\n        });\r\n        \r\n        row.modo_de_pago = '';\r\n        calcularImporteYActualizarTotalNeto(frm, row);\r\n    },\r\n    \r\n    importe_pagado(frm, cdt , cdn) {\r\n        let row = locals[cdt][cdn];\r\n        calcularImporteYActualizarTotalNeto(frm, row);\r\n        \r\n    },\r\n    \r\n    tasa_de_pago(frm, cdt , cdn){\r\n        let row = locals[cdt][cdn];\r\n        calcularImporteYActualizarTotalNeto(frm, row);\r\n        \r\n    },\r\n    \r\n    fecha_pago(frm, cdt , cdn){\r\n        let row = locals[cdt][cdn];\r\n        calcularImporteYActualizarTotalNeto(frm, row);\r\n        \r\n    },\r\n    //actualizar monto cobrado y pendiente en caso de borrar una fila.\r\n    analizar_puro_pagos_remove: function(frm, cdt, cdn){\r\n        actualizarImporteYPendiente(frm);\r\n    }\r\n\r\n});\r\n\r\n    \r\n    //Boton para realizar pruebas\r\nfrappe.ui.form.on('Analizar Puro', { //script llamada a la api para crear factura de compra\r\n    refresh(frm) {\r\n\t   frm.add_custom_button(__(\"Boton de Pruebas\"),function(){\r\n            let current_user = frappe.session.user\r\n            let documento = frm.doc\r\n             //console.log(documento);\r\n             \r\n            frappe.call({\r\n                method: \"analizar_puro\",  // Ruta completa al método en el servidor\r\n                args: {\r\n                    documento: documento,\r\n                    mensaje : \"Esto es una Prueba\"\r\n                },\r\n                callback: function(r) {\r\n                    console.log(r.message);  // Mostrar la respuesta en la consola\r\n                }\r\n            });\r\n\r\n\t    });\r\n\t    \r\n\t}\r\n});\r\n\r\nfrappe.ui.form.on('Analizar Puro', {                                 //validacion antes de guardar\r\n\tbefore_submit: function(frm)\r\n\t{\r\n\t    frappe.throw(\r\n                    'Este Documento no se Puede Validar esta en prueba'\r\n                    );\r\n\t}\r\n});",
  "view": "Form"
 }
]