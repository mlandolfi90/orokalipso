[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-13 11:32:00.558122",
  "module": "OroKalipso",
  "name": "Analizar puro guardar",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Analizar Puro",
  "script": "# Algoritmo para manejar Doctype \"Analizar Puro\"\n#### FUNCIONES AUXILIARES PARA CREAR LOS DOCUMENTOS\n# Función para obtener cuenta desde el modo de pago\ndef get_account_mp(mode_of_payment, company):  # Función para obtener cuenta desde el modo de pago\n    account = frappe.db.get_value(\n        \"Mode of Payment Account\", {\"parent\": mode_of_payment, \"company\": company}, \"default_account\"\n    )\n    if not account:\n        frappe.throw(\n            _(\"Please set default Cash or Bank account in Mode of Payment {0}\").format(\n                get_link_to_form(\"Mode of Payment\", mode_of_payment)\n            ),\n            title=_(\"Missing Account\"),\n        )\n    return account\n# FIN de Función para obtener cuenta desde el modo de pago\n\n# Funcion para obtener moneda de la cuenta\ndef get_account_currency(account):  # Función para obtener tipo de moneda desde la cuenta\n    account_currency = frappe.db.get_value(\n        \"Account\", account, \"account_currency\"\n    )\n    if not account_currency:\n        frappe.throw(\n            _(\"Please set default Cash or Bank account in Mode of Payment {0}\").format(\n                get_link_to_form(\"Account\", account)\n            ),\n            title=_(\"Missing Account\"),\n        )\n    return account_currency\n# FIN Funcion para obtener moneda de la cuenta\n\n# Funcion para obtener balance de la cuenta \ndef obtener_balance(account, date, company):\n    try:\n        # Llamar al método 'get_balance_on' con frappe.call\n        balance = frappe.call(\n            \"erpnext.accounts.utils.get_balance_on\",  # Ruta completa al método\n            account=account,                          # Parámetro 'account'\n            date=date,                                # Parámetro 'date'\n            company=company                           # Parámetro 'company'\n        )\n        return balance  # Devolver el balance obtenido\n    except Exception as e:\n        frappe.throw(f\"Ocurrió un error al obtener el balance: {e}\")\n#FIN Funcion para obtener balance de la cuenta \n\n#### FIN DE FUNCIONES AUXILIARES\n\n\n\n\n### Caso cobro en viruta\n\n\n\nif doc.cobro_en_virutas == 1:\n    \n    ##Segmento del codigo de amortizacion de la viruta recibida##\n    monto_de_amortizacion = sum(item.amount for item in doc.items if item.amount)\n    cuenta_de_amortizacion = doc.cuenta_de_amortizacion\n    centro_costos = doc.centro_costos  # Centro de costo\n    ##fin del segmento de amortizacion ##\n    \n    #creacion del documento Purchase Invoice\n    doc_pi = frappe.get_doc({\n        'doctype': 'Purchase Invoice',                             # Tipo de documento\n        'title': doc.name,\n        'supplier': doc.supplier,\n        'company' : doc.company,\n        'update_stock': 1,\n        'remarks' : doc.name,\n        'write_off_amount' : monto_de_amortizacion,\n        'write_off_account' : cuenta_de_amortizacion,\n        'write_off_cost_center' : centro_costos\n        \n    })\n    \n    for item in doc.items:\n        doc_pi.append('items', item.as_dict())\n    doc_pi.insert()\n    doc_pi.add_comment('Comment', f'Factura de Compra generada automáticamente por el documento Analizar Puro : {doc.name}')\n    doc_pi.submit()\n    frappe.db.set_value('Analizar Puro', doc.name, 'purchase_invoice', doc_pi.name)\n## Fin Caso de cobor en Virutas\n\n## Caso Cobro en divisas\nif doc.cobro_en_divisas == 1:\n    qty = -1                                                # Cantidad negativa debido a factura de retorno para efectos contables\n    is_return = 1                                           # Es retorno para que se cree una nota de crédito contra el proveedor\n    service_row = [{\n        \"item_code\": doc.get(\"item_servicio\"),              #Obtener el item servicio Configurado segun documento\n        \"description\": \"Servicio de Analisis\",\n        \"qty\": qty,\n        \"rate\": doc.get('divisas_predeterminado'),\n    }]\n    invoice_data = {\n        'supplier': doc.get('supplier'),\n        'supplier_name': doc.get('supplier'),\n        'title': doc.name,\n        'posting_date': doc.get('posting_date'),\n        'posting_time': doc.get('posting_time'),\n        'company': doc.get('company'),\n        'set_posting_time': 1,\n        'due_date': doc.get('posting_date'),\n        'items': service_row,\n        'is_return': is_return,\n        'cost_center': doc.get('centro_costos'),\n        'remarks': doc.name\n    }\n    # Crear la factura\n    doc_pi = frappe.get_doc({\n        \"doctype\": \"Purchase Invoice\",\n        **invoice_data  # Expandir el diccionario en los campos del documento\n    })\n    doc_pi.insert()\n    doc_pi.submit()\n    frappe.db.set_value('Analizar Puro', doc.name, 'purchase_invoice', doc_pi.name)\n    # Fin creacion de la factura\n    \n    # Condicion no es credito no se generaran entradas de pago\n    if doc.credito == 0:\n        # Inicio Reocrrido de tabla pagos\n        for pay in doc.analizar_puro_pagos:\n            cuenta_modo_de_pago = get_account_mp(pay.get('modo_de_pago'), doc.get('company'))\n            divisa_modo_de_pago = get_account_currency(cuenta_modo_de_pago)\n            saldo_modo_de_pago = obtener_balance(cuenta_modo_de_pago, pay.get('fecha_pago'), doc.get('company'))\n            \n            doc_pe = frappe.call(\n                \"erpnext.accounts.doctype.payment_entry.payment_entry.get_payment_entry\",\n                dt=doc_pi.doctype,\n                dn=doc_pi.name\n            )\n            doc_pe.posting_date = pay.get('fecha_pago')\n            doc_pe.mode_of_payment = pay.get('modo_de_pago')\n            doc_pe.paid_to = cuenta_modo_de_pago\n            doc_pe.paid_to_account_currency = divisa_modo_de_pago\n            doc_pe.paid_to_account_balance = saldo_modo_de_pago\n            doc_pe.paid_to_account_currency = pay.divisa_de_pago\n            doc_pe.paid_amount = pay.get('importe_pago')\n            doc_pe.received_amount = pay.get('importe_pagado')\n            doc_pe.target_exchange_rate = (1 / pay.get('tasa_de_pago'))\n            doc_pe.reference_no = pay.get('referencia')\n            doc_pe.reference_date = pay.get('fecha_pago')\n            doc_pe.insert()\n        # Fin recorrido tabla pagos\n        \n    # Fin condicion de credito\n\n## Fin Caso cobro en Divisas",
  "script_type": "DocType Event"
 }
]